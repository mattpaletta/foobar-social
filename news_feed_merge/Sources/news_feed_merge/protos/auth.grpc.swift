//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: auth.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Foobar_Auth_AuthServicecheck_authCall: ClientCallUnary {}

fileprivate final class Foobar_Auth_AuthServicecheck_authCallBase: ClientCallUnaryBase<Foobar_Auth_Auth, Foobar_Auth_Token>, Foobar_Auth_AuthServicecheck_authCall {
  override class var method: String { return "/foobar.auth.AuthService/check_auth" }
}


/// Instantiate Foobar_Auth_AuthServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Foobar_Auth_AuthServiceService: ServiceClient {
  /// Synchronous. Unary.
  func check_auth(_ request: Foobar_Auth_Auth, metadata customMetadata: Metadata) throws -> Foobar_Auth_Token
  /// Asynchronous. Unary.
  @discardableResult
  func check_auth(_ request: Foobar_Auth_Auth, metadata customMetadata: Metadata, completion: @escaping (Foobar_Auth_Token?, CallResult) -> Void) throws -> Foobar_Auth_AuthServicecheck_authCall

}

internal extension Foobar_Auth_AuthServiceService {
  /// Synchronous. Unary.
  func check_auth(_ request: Foobar_Auth_Auth) throws -> Foobar_Auth_Token {
    return try self.check_auth(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func check_auth(_ request: Foobar_Auth_Auth, completion: @escaping (Foobar_Auth_Token?, CallResult) -> Void) throws -> Foobar_Auth_AuthServicecheck_authCall {
    return try self.check_auth(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Foobar_Auth_AuthServiceServiceClient: ServiceClientBase, Foobar_Auth_AuthServiceService {
  /// Synchronous. Unary.
  internal func check_auth(_ request: Foobar_Auth_Auth, metadata customMetadata: Metadata) throws -> Foobar_Auth_Token {
    return try Foobar_Auth_AuthServicecheck_authCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func check_auth(_ request: Foobar_Auth_Auth, metadata customMetadata: Metadata, completion: @escaping (Foobar_Auth_Token?, CallResult) -> Void) throws -> Foobar_Auth_AuthServicecheck_authCall {
    return try Foobar_Auth_AuthServicecheck_authCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Foobar_Auth_AuthServiceProvider: ServiceProvider {
  func check_auth(request: Foobar_Auth_Auth, session: Foobar_Auth_AuthServicecheck_authSession) throws -> Foobar_Auth_Token
}

extension Foobar_Auth_AuthServiceProvider {
  internal var serviceName: String { return "foobar.auth.AuthService" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/foobar.auth.AuthService/check_auth":
      return try Foobar_Auth_AuthServicecheck_authSessionBase(
        handler: handler,
        providerBlock: { try self.check_auth(request: $0, session: $1 as! Foobar_Auth_AuthServicecheck_authSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Foobar_Auth_AuthServicecheck_authSession: ServerSessionUnary {}

fileprivate final class Foobar_Auth_AuthServicecheck_authSessionBase: ServerSessionUnaryBase<Foobar_Auth_Auth, Foobar_Auth_Token>, Foobar_Auth_AuthServicecheck_authSession {}

