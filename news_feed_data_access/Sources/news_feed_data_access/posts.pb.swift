// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: posts.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Foobar_Posts_Post {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  var msg: String {
    get {return _storage._msg}
    set {_uniqueStorage()._msg = newValue}
  }

  var datetime: Int64 {
    get {return _storage._datetime}
    set {_uniqueStorage()._datetime = newValue}
  }

  var loc: Foobar_Shared_Location {
    get {return _storage._loc ?? Foobar_Shared_Location()}
    set {_uniqueStorage()._loc = newValue}
  }
  /// Returns true if `loc` has been explicitly set.
  var hasLoc: Bool {return _storage._loc != nil}
  /// Clears the value of `loc`. Subsequent reads from it will return its default value.
  mutating func clearLoc() {_uniqueStorage()._loc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "foobar.posts"

extension Foobar_Posts_Post: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Post"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "username"),
    3: .same(proto: "msg"),
    4: .same(proto: "datetime"),
    5: .same(proto: "loc"),
  ]

  fileprivate class _StorageClass {
    var _id: Int64 = 0
    var _username: String = String()
    var _msg: String = String()
    var _datetime: Int64 = 0
    var _loc: Foobar_Shared_Location? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _username = source._username
      _msg = source._msg
      _datetime = source._datetime
      _loc = source._loc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._username)
        case 3: try decoder.decodeSingularStringField(value: &_storage._msg)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._datetime)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._loc)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 2)
      }
      if !_storage._msg.isEmpty {
        try visitor.visitSingularStringField(value: _storage._msg, fieldNumber: 3)
      }
      if _storage._datetime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._datetime, fieldNumber: 4)
      }
      if let v = _storage._loc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Foobar_Posts_Post, rhs: Foobar_Posts_Post) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._username != rhs_storage._username {return false}
        if _storage._msg != rhs_storage._msg {return false}
        if _storage._datetime != rhs_storage._datetime {return false}
        if _storage._loc != rhs_storage._loc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
