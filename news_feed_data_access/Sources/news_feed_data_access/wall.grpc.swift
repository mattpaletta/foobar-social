//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: wall.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Foobar_Wall_WallfetchCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Foobar_Wall_WallPost?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Foobar_Wall_WallPost?>) -> Void) throws
}

internal extension Foobar_Wall_WallfetchCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Foobar_Wall_WallPost? { return try self._receive(timeout: timeout) }
}

fileprivate final class Foobar_Wall_WallfetchCallBase: ClientCallServerStreamingBase<Foobar_User_User, Foobar_Wall_WallPost>, Foobar_Wall_WallfetchCall {
  override class var method: String { return "/foobar.wall.Wall/fetch" }
}

internal protocol Foobar_Wall_WallputCall: ClientCallUnary {}

fileprivate final class Foobar_Wall_WallputCallBase: ClientCallUnaryBase<Foobar_Wall_WallPost, Foobar_Shared_Empty>, Foobar_Wall_WallputCall {
  override class var method: String { return "/foobar.wall.Wall/put" }
}


/// Instantiate Foobar_Wall_WallServiceClient, then call methods of this protocol to make API calls.
internal protocol Foobar_Wall_WallService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func fetch(_ request: Foobar_User_User, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Foobar_Wall_WallfetchCall

  /// Synchronous. Unary.
  func put(_ request: Foobar_Wall_WallPost, metadata customMetadata: Metadata) throws -> Foobar_Shared_Empty
  /// Asynchronous. Unary.
  @discardableResult
  func put(_ request: Foobar_Wall_WallPost, metadata customMetadata: Metadata, completion: @escaping (Foobar_Shared_Empty?, CallResult) -> Void) throws -> Foobar_Wall_WallputCall

}

internal extension Foobar_Wall_WallService {
  /// Asynchronous. Server-streaming.
  func fetch(_ request: Foobar_User_User, completion: ((CallResult) -> Void)?) throws -> Foobar_Wall_WallfetchCall {
    return try self.fetch(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func put(_ request: Foobar_Wall_WallPost) throws -> Foobar_Shared_Empty {
    return try self.put(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func put(_ request: Foobar_Wall_WallPost, completion: @escaping (Foobar_Shared_Empty?, CallResult) -> Void) throws -> Foobar_Wall_WallputCall {
    return try self.put(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Foobar_Wall_WallServiceClient: ServiceClientBase, Foobar_Wall_WallService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func fetch(_ request: Foobar_User_User, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Foobar_Wall_WallfetchCall {
    return try Foobar_Wall_WallfetchCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func put(_ request: Foobar_Wall_WallPost, metadata customMetadata: Metadata) throws -> Foobar_Shared_Empty {
    return try Foobar_Wall_WallputCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func put(_ request: Foobar_Wall_WallPost, metadata customMetadata: Metadata, completion: @escaping (Foobar_Shared_Empty?, CallResult) -> Void) throws -> Foobar_Wall_WallputCall {
    return try Foobar_Wall_WallputCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Foobar_Wall_WallProvider: ServiceProvider {
  func fetch(request: Foobar_User_User, session: Foobar_Wall_WallfetchSession) throws -> ServerStatus?
  func put(request: Foobar_Wall_WallPost, session: Foobar_Wall_WallputSession) throws -> Foobar_Shared_Empty
}

extension Foobar_Wall_WallProvider {
  internal var serviceName: String { return "foobar.wall.Wall" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/foobar.wall.Wall/fetch":
      return try Foobar_Wall_WallfetchSessionBase(
        handler: handler,
        providerBlock: { try self.fetch(request: $0, session: $1 as! Foobar_Wall_WallfetchSessionBase) })
          .run()
    case "/foobar.wall.Wall/put":
      return try Foobar_Wall_WallputSessionBase(
        handler: handler,
        providerBlock: { try self.put(request: $0, session: $1 as! Foobar_Wall_WallputSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Foobar_Wall_WallfetchSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Foobar_Wall_WallPost, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Foobar_Wall_WallPost, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Foobar_Wall_WallfetchSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Foobar_Wall_WallPost, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Foobar_Wall_WallfetchSessionBase: ServerSessionServerStreamingBase<Foobar_User_User, Foobar_Wall_WallPost>, Foobar_Wall_WallfetchSession {}

internal protocol Foobar_Wall_WallputSession: ServerSessionUnary {}

fileprivate final class Foobar_Wall_WallputSessionBase: ServerSessionUnaryBase<Foobar_Wall_WallPost, Foobar_Shared_Empty>, Foobar_Wall_WallputSession {}

